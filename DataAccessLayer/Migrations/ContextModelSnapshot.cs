// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Concrete.Cocktail", b =>
                {
                    b.Property<int>("CocktailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CocktailID"));

                    b.Property<string>("CocktailName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CocktailStory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ColorID")
                        .HasColumnType("int");

                    b.Property<int?>("GlassID")
                        .HasColumnType("int");

                    b.Property<int?>("PreparationID")
                        .HasColumnType("int");

                    b.Property<int?>("TemperatureID")
                        .HasColumnType("int");

                    b.HasKey("CocktailID");

                    b.HasIndex("ColorID");

                    b.HasIndex("GlassID");

                    b.HasIndex("PreparationID");

                    b.HasIndex("TemperatureID");

                    b.ToTable("Cocktails");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Color", b =>
                {
                    b.Property<int>("ColorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorID"));

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorID");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Glass", b =>
                {
                    b.Property<int>("GlassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GlassID"));

                    b.Property<string>("GlassName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GlassID");

                    b.ToTable("Glasses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Ingredient", b =>
                {
                    b.Property<int>("IngredientsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientsID"));

                    b.Property<int?>("CocktailID")
                        .HasColumnType("int");

                    b.Property<float?>("IngredientsAlcoholPercent")
                        .HasColumnType("real");

                    b.Property<float?>("IngredientsAmount")
                        .HasColumnType("real");

                    b.Property<string>("IngredientsName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientsID");

                    b.HasIndex("CocktailID");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Preparation", b =>
                {
                    b.Property<int>("PreparationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreparationID"));

                    b.Property<string>("PreparationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreparationID");

                    b.ToTable("Preparations");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Temperature", b =>
                {
                    b.Property<int>("TemperatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemperatureID"));

                    b.Property<string>("TemperatureName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemperatureID");

                    b.ToTable("Temperatures");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Cocktail", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorID");

                    b.HasOne("EntityLayer.Concrete.Glass", "Glass")
                        .WithMany()
                        .HasForeignKey("GlassID");

                    b.HasOne("EntityLayer.Concrete.Preparation", "Preparation")
                        .WithMany()
                        .HasForeignKey("PreparationID");

                    b.HasOne("EntityLayer.Concrete.Temperature", "Temperature")
                        .WithMany()
                        .HasForeignKey("TemperatureID");

                    b.Navigation("Color");

                    b.Navigation("Glass");

                    b.Navigation("Preparation");

                    b.Navigation("Temperature");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Ingredient", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Cocktail", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("CocktailID");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Cocktail", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
